from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QListWidget, QHBoxLayout, QLabel, QPushButton, QVBoxLayout, QFileDialog
import os
from PyQt5.QtGui import QPixmap
from PIL import Image, ImageFilter

app = QApplication([])
main_win = QWidget()
papka = QPushButton('Папка')
sp_element = QListWidget()
kartinka = QLabel('картинка')
left = QPushButton('Лево')
right = QPushButton('Право')
mirror = QPushButton('Зеркало')
rezk = QPushButton('Резкость')
ch_b = QPushButton('Ч/Б')
blur = QPushButton('Размыть')

main_line_4 = QHBoxLayout()
line_1 = QVBoxLayout()
line_2 = QHBoxLayout()
line_3 = QVBoxLayout()

line_1.addWidget(papka)
line_1.addWidget(sp_element)
line_3.addWidget(kartinka)
line_2.addWidget(left)
line_2.addWidget(right)
line_2.addWidget(mirror)
line_2.addWidget(rezk)
line_2.addWidget(ch_b)
line_2.addWidget(blur)

line_3.addLayout(line_2)
main_line_4.addLayout(line_1)
main_line_4.addLayout(line_3)

wirkdir = ''

def filter(files, extensions):
    result = []
    for i in files:
        for y in extensions:
            if i.endswith(y):
                result.append(i)
    return result

def showFilenamesList():
    extensions = ['jpg','png', 'bmp', 'jfif']
    global workdir
    workdir = QFileDialog.getExistingDirectory()
    files = filter(os.listdir(workdir), extensions)
    sp_element.clear()
    for i in files:
        sp_element.addItem(i)

class ImageProcessor():
    def __init__(self):
        self.image = None
        self.filename = None
        self.save_dir = 'Mod/'
    def loadImage(self, filename):
        self.filename = filename
        image_path = os.path.join(workdir, filename)
        self.image = Image.open(image_path)
    def showImage(self, path):
        kartinka.hide()
        pixmapimage = QPixmap(path)
        w, h = kartinka.width(), kartinka.height()
        pixmapimage = pixmapimage.scaled(w, h, Qt.KeepAspectRatio)
        kartinka.setPixmap(pixmapimage)
        kartinka.show()

    def do_bw(self):#чб
        self.image = self.image.convert('L')
        self.saveImage()
        path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(path)
    def do_mirror(self):#зеркало
        self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
        self.saveImage()
        path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(path)
    def do_left(self):#поворот влево
        self.image = self.image.transpose(Image.ROTATE_90)
        self.saveImage()
        path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(path)
    def do_right(self):#поворот вправо
        self.image = self.image.transpose(Image.ROTATE_270)
        self.saveImage()
        path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(path)
    def do_rezk(self):
        self.image = self.image.filter(ImageFilter.SHARPEN)
        self.saveImage()
        path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(path)
    def do_blur(self):
        self.image = self.image.filter(ImageFilter.BLUR)
        self.saveImage()
        path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(path)
    

    def saveImage(self):#сохр новой картинки
        path = os.path.join(workdir, self.save_dir)
        if not (os.path.exists(path)or os.path.isdir(path)):
            os.mkdir(path)
        image_path = os.path.join(path, self.filename)
        self.image.save(image_path)



workimage = ImageProcessor()

def showChosenImage():
    if sp_element.currentRow() >= 0:
        filename = sp_element.currentItem().text()
        workimage.loadImage(filename)
        image_path = os.path.join(workdir, workimage.filename)
        workimage.showImage(image_path)
sp_element.currentRowChanged.connect(showChosenImage)





papka.clicked.connect(showFilenamesList)

ch_b.clicked.connect(workimage.do_bw)
mirror.clicked.connect(workimage.do_mirror)
left.clicked.connect(workimage.do_left)
right.clicked.connect(workimage.do_right)
rezk.clicked.connect(workimage.do_rezk)
blur.clicked.connect(workimage.do_blur)

main_win.setLayout(main_line_4)

main_win.show()
app.exec()
